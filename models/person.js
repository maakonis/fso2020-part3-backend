/* eslint-disable no-underscore-dangle */
/* eslint-disable no-param-reassign */
const mongoose = require('mongoose')
// library that enables unique value validation for the schema keys
const uniqueValidator = require('mongoose-unique-validator')

const url = process.env.MONGODB_URI

// custom validator to check if the number entered has at least x number of digits
const validatePhoneLength = {
  validator: (number) => number.replace(/\D/g, '').length >= 8,
  message: () => 'The phone number must be at least 8 digits.',
}


// create a connection to a MongoDB DATABASE
mongoose.connect(url, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('connected to MongoDB'))
  .catch((error) => console.log('error connecting to MongoDB:', error.message))

// specify the DOCUMENT (equiv. to a row in table) scheme, i.e., the shape and content
const phoneSchema = new mongoose.Schema({
  name: { type: String, unique: true },
  number: { type: String, validate: validatePhoneLength },
})

// apply the unique validator plugin.
phoneSchema.plugin(uniqueValidator)

// amend the toJSON method to remove the unncessary id and __v fields (generated by MongoDB)
phoneSchema.set('toJSON', {
  transform: (document, returnedObject) => {
    returnedObject.id = returnedObject._id.toString()
    delete returnedObject._id
    delete returnedObject.__v
  },
})

// make accessible only the model in export
module.exports = mongoose.model('PhoneEntry', phoneSchema)
